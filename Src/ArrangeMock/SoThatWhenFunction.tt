<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ output extension=".Generated.cs" #>
using System;
using System.Linq.Expressions;

namespace ArrangeMock
{
    internal partial class SoThatWhenFunction<T,TResult> 
    {

<#
for (var typeCount = 2; typeCount <= GenericTypeMax; typeCount++)
{
    var typeList = GetGenericList(typeCount, GenericTypeFormat);
#>
        public void AreUsedToInvokeAction<<#= typeList #>>(Action<<#= typeList #>> action)
        {
            _mockToArrange.Setup(_moqExpressionCastToOriginalType).Callback(action);
        }

        public void AreSavedTo<<#= typeList #>>(<#= GenerateStringNTimesUsingFormatAndSeparatorWithTwoArgs(typeCount, "Expression<Func<T{0}>> memberAccessExpression{1}")#>)
        {
            var assignTolocalVariable = ExpressionConverter.ConvertMemberAccessFuncsToAssignmentActionBlock(<#= GenerateStringNTimesUsingFormatAndSeparator(typeCount, "memberAccessExpression{0}") #>);
            _mockToArrange.Setup(_moqExpressionCastToOriginalType).Callback(assignTolocalVariable);
        }
<#
}
#>
    }
}

<#@ Include File="TextTemplatingHelpers.tt" #>
